POINTER
1.	Khái niệm:
•	Con trỏ hay biến con trỏ cũng là một biến thông thường nhưng giá trị mà nó lưu lại là địa chỉ của 1 biến khác


    int arr [5] = {100,5,8,8,54} ; // khái báo  1 mảng
    int *ptr = arr ; // khai báo con trỏ cho mảng


•	Kích thước của con trỏ không phụ thuộc vào kiểu dữ liệu nó phụ thuộc vào trình biên dịch 

printf("%d byte\n", sizeof(float*)); // kich thuoc con tro phu thuoc vao trinh bien dich 

•	ví dụ về cập nhật giá trị của biến

int main() {
  int x = 10;

  
  int * ptr = & x;
  printf("Value of x = %d\n", * ptr);
  * ptr = 20;
  printf("Value of x = %d\n", * ptr);

  return 0;
}


2.	 Function pointer
Khái niêm
Là một con trỏ đến vùng nhớ trong bộ nhớ chứa mã máy của hàm được định nghĩa trong chương trình.
•	con trỏ hàm cho phép bạn truyền một hàm như là một đối số cho một hàm khác
•	lưu trữ địa chỉ của hàm trong một cấu trúc dữ liệu
•	truyền hàm như một giá trị trả về từ một hàm khác


ví dụ truyền một hàm như là một đối số cho một hàm khác

int addition (int a, int b){
   return a + b;
}

int main(){
    int x = 10, y = 20;
   
   void (*ptr)() ;
   ptr = addition(x,y);
   int z = *ptr;
   

   printf("Addition of x: %d and y: %d = %d", x, y, z);
   
   return 0;
}


ví dụ lưu trữ hàm trong 1 cấu trúc dữ liệu.
void swap(int *a, int *b){
   int c;
   c = *a;
   *a = *b;
   *b = c;
}

int main(){
   
   void (*ptr)(int *, int *) = swap;
   
   int x = 10, y = 20;
   printf("Values of x: %d and y: %d before swap\n", x, y);
   
   (*ptr)(&x, &y);
   printf("Values of x: %d and y: %d after swap", x, y);
   
   return 0;
}


ví dụ truyền hàm như một giá trị trả về từ một hàm khác

void func1(void (*ptr)());  
void func2();
void func1(void (*ptr)())  
{  
    printf("Function1 is called");  
    (*ptr)();  
}  
void func2()  
{  
    printf("\nFunction2 is called");  
}  
int main()  
{  
    func1(func2);  
     return 0;  
}  


3.	Pointer to constant
Khái niệm
Một con trỏ không thể thay đổi giá trị tại địa chỉ mà nó trỏ đến thông qua dereference nhưng giá trị tại địa chỉ đó có thể thay đổi.

VÍ DỤ

    int EX1 = 8;
    int const *ptr_const = &EX1;

    printf("value: %d\n", *ptr_const);

    EX1 = 9;

    printf("value: %d\n", *ptr_const);

    return 0;



4.	Constant Pointer
Khái niệm:
con trỏ mà giá trị nó trỏ đến (địa chỉ ) không thể thay đổi. chỉ được khỏi tạo một lần và không thay đổi được địa chỉ.


Ví dụ

    int EX1 = 15;
    int *const const_ptr = &EX1;

printf("value: %d\n", *const_ptr);





5.	Pointer to pointer
Khái niệm :
Con trỏ đến con trỏ (Pointer to Pointer) là một kiểu dữ liệu trong ngôn ngữ lập trình cho phép bạn lưu trữ địa chỉ của một con trỏ. Con trỏ đến con trỏ cung cấp một cấp bậc trỏ mới, cho phép bạn thay đổi giá trị của con trỏ gốc.


Ví dụ
    int var = 789;
    int* ptr1;
    int** ptr2;
    ptr1 = &var; 
    ptr2 = &ptr1;
    printf("Value of var = %d\n", var);
    printf("Value of var using single pointer = %d\n", *ptr1);
    printf("Value of var using double pointer = %d\n", **ptr2);


